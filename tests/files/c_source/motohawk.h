/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 29.2.1 Sat Nov 24 13:46:50 2018.
 */

#ifndef __MOTOHAWK_H__
#define __MOTOHAWK_H__

#include <stdint.h>
#include <stdbool.h>
#include <unistd.h>

#ifndef EINVAL
#    define EINVAL -22
#endif

#define MOTOHAWK_FRAME_ID_EXAMPLE_MESSAGE (0x1f0U)

/**
 * Signals in message ExampleMessage.
 *
 * @param enable
 *            Minimum: -
 *            Maximum: -
 *            Scale: 1
 *            Offset: 0
 *            Unit: -
 * @param average_radius
 *            Minimum: 0
 *            Maximum: 5
 *            Scale: 0.1
 *            Offset: 0
 *            Unit: m
 * @param temperature
 *            Minimum: 229.52
 *            Maximum: 270.47
 *            Scale: 0.01
 *            Offset: 250
 *            Unit: degK
 */
struct motohawk_example_message_t {
    uint8_t enable;
    uint8_t average_radius;
    int16_t temperature;
};

/**
 * Encode message ExampleMessage.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t motohawk_example_message_encode(
    uint8_t *dst_p,
    struct motohawk_example_message_t *src_p,
    size_t size);

/**
 * Decode message ExampleMessage.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int motohawk_example_message_decode(
    struct motohawk_example_message_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motohawk_example_message_enable_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motohawk_example_message_average_radius_is_in_range(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool motohawk_example_message_temperature_is_in_range(int16_t value);

#endif
