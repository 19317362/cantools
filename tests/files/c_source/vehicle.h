/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 28.8.1 Wed Oct 24 08:01:10 2018.
 */

#ifndef __VEHICLE_H__
#define __VEHICLE_H__

#include <stdint.h>
#include <unistd.h>

#ifndef EINVAL
#    define EINVAL -22
#endif

/**
 * Signals in message RT_SB_INS_Vel_Body_Axes.
 *
 * @param validity_ins_vel_forwards
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_vel_sideways
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_body
 *            Accuracy of INS body axis velocities (forward velocity and sideways velocity)
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_vel_forwards_2_d
 *            Forwards Velocity in the vehicle body axes, 2D (no vertical component) .
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param ins_vel_sideways_2_d
 *            Sideways Velocity in the vehicle body axes, 2D (no vertical component) .  +ve for motion to the vehicle RHS.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vel_body_axes_t {
    uint8_t validity_ins_vel_forwards;
    uint8_t validity_ins_vel_sideways;
    uint8_t accuracy_ins_vel_body;
    int32_t ins_vel_forwards_2_d;
    int32_t ins_vel_sideways_2_d;
};

/**
 * Signals in message RT_DL1MK3_Speed.
 *
 * @param validity_speed
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_speed
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param speed
 *            Minimum: -20000
 *            Maximum: 20000
 *            Scale: 1e-05
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_dl1_mk3_speed_t {
    uint8_t validity_speed;
    uint8_t accuracy_speed;
    int32_t speed;
};

/**
 * Signals in message RT_DL1MK3_GPS_Time.
 *
 * @param validity_gps_time
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_week
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_time
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_time
 *            GPS time is the time in seconds since midnight GMT on Saturday night.
 *            Minimum: 0
 *            Maximum: 604800
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: s
 * @param gps_week
 *            Minimum: 0
 *            Maximum: 65535
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_gps_time_t {
    uint8_t validity_gps_time;
    uint8_t validity_gps_week;
    uint8_t accuracy_gps_time;
    uint32_t gps_time;
    uint16_t gps_week;
};

/**
 * Signals in message RT_DL1MK3_GPS_Pos_LLH_2.
 *
 * @param gps_pos_llh_longitude
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 * @param gps_pos_llh_altitude
 *            Minimum: -1000
 *            Maximum: 100000
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_dl1_mk3_gps_pos_llh_2_t {
    int32_t gps_pos_llh_longitude;
    int32_t gps_pos_llh_altitude;
};

/**
 * Signals in message RT_DL1MK3_GPS_Pos_LLH_1.
 *
 * @param validity_gps_pos_llh_latitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_llh_longitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_llh_altitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_latitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_longitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_altitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_pos_llh_latitude
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_dl1_mk3_gps_pos_llh_1_t {
    uint8_t validity_gps_pos_llh_latitude;
    uint8_t validity_gps_pos_llh_longitude;
    uint8_t validity_gps_pos_llh_altitude;
    uint8_t accuracy_gps_pos_llh_latitude;
    uint8_t accuracy_gps_pos_llh_longitude;
    uint8_t accuracy_gps_pos_llh_altitude;
    int32_t gps_pos_llh_latitude;
};

/**
 * Signals in message RT_DL1MK3_GPS_Speed.
 *
 * @param validity_gps_speed_2_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_speed_3_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_speed
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_speed_2_d
 *            This is GPS scalar 2D speed - scalar speed with no local Z axis component included.
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param gps_speed_3_d
 *            This is GPS scalar 3D speed - scalar speed with the local Z axis component included.
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_dl1_mk3_gps_speed_t {
    uint8_t validity_gps_speed_2_d;
    uint8_t validity_gps_speed_3_d;
    uint8_t accuracy_gps_speed;
    uint32_t gps_speed_2_d;
    uint32_t gps_speed_3_d;
};

/**
 * Signals in message RT_IRTemp_Temp_7.
 *
 * @param ir_temperature_7
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_7_t {
    int16_t ir_temperature_7;
};

/**
 * Signals in message RT_IRTemp_Temp_RR_2.
 *
 * @param ir_temperature_29
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_30
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_31
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_32
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_rr_2_t {
    int16_t ir_temperature_29;
    int16_t ir_temperature_30;
    int16_t ir_temperature_31;
    int16_t ir_temperature_32;
};

/**
 * Signals in message RT_IRTemp_Temp_RL_2.
 *
 * @param ir_temperature_21
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_22
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_23
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_24
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_rl_2_t {
    int16_t ir_temperature_21;
    int16_t ir_temperature_22;
    int16_t ir_temperature_23;
    int16_t ir_temperature_24;
};

/**
 * Signals in message RT_IRTemp_Temp_FR_2.
 *
 * @param ir_temperature_13
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_14
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_15
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_16
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_fr_2_t {
    int16_t ir_temperature_13;
    int16_t ir_temperature_14;
    int16_t ir_temperature_15;
    int16_t ir_temperature_16;
};

/**
 * Signals in message RT_IRTemp_Temp_FL_2.
 *
 * @param ir_temperature_5
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_6
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_7
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_8
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_fl_2_t {
    int16_t ir_temperature_5;
    int16_t ir_temperature_6;
    int16_t ir_temperature_7;
    int16_t ir_temperature_8;
};

/**
 * Signals in message RT_IRTemp_Temp_RR_1.
 *
 * @param ir_temperature_25
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_26
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_27
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_28
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_rr_1_t {
    int16_t ir_temperature_25;
    int16_t ir_temperature_26;
    int16_t ir_temperature_27;
    int16_t ir_temperature_28;
};

/**
 * Signals in message RT_IRTemp_Temp_RL_1.
 *
 * @param ir_temperature_17
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_18
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_19
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_20
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_rl_1_t {
    int16_t ir_temperature_17;
    int16_t ir_temperature_18;
    int16_t ir_temperature_19;
    int16_t ir_temperature_20;
};

/**
 * Signals in message RT_IRTemp_Temp_FR_1.
 *
 * @param ir_temperature_9
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_10
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_11
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_12
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_fr_1_t {
    int16_t ir_temperature_9;
    int16_t ir_temperature_10;
    int16_t ir_temperature_11;
    int16_t ir_temperature_12;
};

/**
 * Signals in message RT_IRTemp_Temp_FL_1.
 *
 * @param ir_temperature_1
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_2
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_3
 *            Scale: 0.1
 *            Offset: 0
 * @param ir_temperature_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_fl_1_t {
    int16_t ir_temperature_1;
    int16_t ir_temperature_2;
    int16_t ir_temperature_3;
    int16_t ir_temperature_4;
};

/**
 * Signals in message RT_IRTemp_Temp_32.
 *
 * @param ir_temperature_32
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_32_t {
    int16_t ir_temperature_32;
};

/**
 * Signals in message RT_IRTemp_Temp_31.
 *
 * @param ir_temperature_31
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_31_t {
    int16_t ir_temperature_31;
};

/**
 * Signals in message RT_IRTemp_Temp_30.
 *
 * @param ir_temperature_30
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_30_t {
    int16_t ir_temperature_30;
};

/**
 * Signals in message RT_IRTemp_Temp_29.
 *
 * @param ir_temperature_29
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_29_t {
    int16_t ir_temperature_29;
};

/**
 * Signals in message RT_IRTemp_Temp_28.
 *
 * @param ir_temperature_28
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_28_t {
    int16_t ir_temperature_28;
};

/**
 * Signals in message RT_IRTemp_Temp_27.
 *
 * @param ir_temperature_27
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_27_t {
    int16_t ir_temperature_27;
};

/**
 * Signals in message RT_IRTemp_Temp_26.
 *
 * @param ir_temperature_26
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_26_t {
    int16_t ir_temperature_26;
};

/**
 * Signals in message RT_IRTemp_Temp_25.
 *
 * @param ir_temperature_25
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_25_t {
    int16_t ir_temperature_25;
};

/**
 * Signals in message RT_IRTemp_Temp_24.
 *
 * @param ir_temperature_24
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_24_t {
    int16_t ir_temperature_24;
};

/**
 * Signals in message RT_IRTemp_Temp_22.
 *
 * @param ir_temperature_22
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_22_t {
    int16_t ir_temperature_22;
};

/**
 * Signals in message RT_IRTemp_Temp_23.
 *
 * @param ir_temperature_23
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_23_t {
    int16_t ir_temperature_23;
};

/**
 * Signals in message RT_IRTemp_Temp_21.
 *
 * @param ir_temperature_21
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_21_t {
    int16_t ir_temperature_21;
};

/**
 * Signals in message RT_IRTemp_Temp_20.
 *
 * @param ir_temperature_20
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_20_t {
    int16_t ir_temperature_20;
};

/**
 * Signals in message RT_IRTemp_Temp_19.
 *
 * @param ir_temperature_19
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_19_t {
    int16_t ir_temperature_19;
};

/**
 * Signals in message RT_IRTemp_Temp_18.
 *
 * @param ir_temperature_18
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_18_t {
    int16_t ir_temperature_18;
};

/**
 * Signals in message RT_IRTemp_Temp_16.
 *
 * @param ir_temperature_16
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_16_t {
    int16_t ir_temperature_16;
};

/**
 * Signals in message RT_IRTemp_Temp_15.
 *
 * @param ir_temperature_15
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_15_t {
    int16_t ir_temperature_15;
};

/**
 * Signals in message RT_IRTemp_Temp_14.
 *
 * @param ir_temperature_14
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_14_t {
    int16_t ir_temperature_14;
};

/**
 * Signals in message RT_IRTemp_Temp_13.
 *
 * @param ir_temperature_13
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_13_t {
    int16_t ir_temperature_13;
};

/**
 * Signals in message RT_IRTemp_Temp_12.
 *
 * @param ir_temperature_12
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_12_t {
    int16_t ir_temperature_12;
};

/**
 * Signals in message RT_IRTemp_Temp_11.
 *
 * @param ir_temperature_11
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_11_t {
    int16_t ir_temperature_11;
};

/**
 * Signals in message RT_IRTemp_Temp_10.
 *
 * @param ir_temperature_10
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_10_t {
    int16_t ir_temperature_10;
};

/**
 * Signals in message RT_IRTemp_Temp_8.
 *
 * @param ir_temperature_8
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_8_t {
    int16_t ir_temperature_8;
};

/**
 * Signals in message RT_IRTemp_Temp_9.
 *
 * @param ir_temperature_9
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_9_t {
    int16_t ir_temperature_9;
};

/**
 * Signals in message RT_IRTemp_Temp_17.
 *
 * @param ir_temperature_17
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_17_t {
    int16_t ir_temperature_17;
};

/**
 * Signals in message RT_IRTemp_Temp_6.
 *
 * @param ir_temperature_6
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_6_t {
    int16_t ir_temperature_6;
};

/**
 * Signals in message RT_IRTemp_Temp_5.
 *
 * @param ir_temperature_5
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_5_t {
    int16_t ir_temperature_5;
};

/**
 * Signals in message RT_IRTemp_Temp_4.
 *
 * @param ir_temperature_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_4_t {
    int16_t ir_temperature_4;
};

/**
 * Signals in message RT_IRTemp_Temp_3.
 *
 * @param ir_temperature_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_3_t {
    int16_t ir_temperature_3;
};

/**
 * Signals in message RT_IRTemp_Temp_2.
 *
 * @param ir_temperature_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_2_t {
    int16_t ir_temperature_2;
};

/**
 * Signals in message RT_IRTemp_Temp_1.
 *
 * @param ir_temperature_1
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_ir_temp_temp_1_t {
    int16_t ir_temperature_1;
};

/**
 * Signals in message RT_SB_Trig_Final_Condition.
 *
 * @param validity_final_speed
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param final_speed
 *            Speed at end of triggered test
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_trig_final_condition_t {
    uint8_t validity_final_speed;
    uint32_t final_speed;
};

/**
 * Signals in message RT_SB_Trig_Initial_Condition.
 *
 * @param validity_initial_speed
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_initial_heading
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param initial_speed
 *            Speed at start of triggered test
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param initial_heading
 *            Heading (track) at start of triggered test
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param mfdd_start_threshold
 *            Minimum: 0
 *            Maximum: 100
 *            Scale: 1
 *            Offset: 0
 *            Unit: %
 * @param mfdd_end_threshold
 *            Minimum: 0
 *            Maximum: 100
 *            Scale: 1
 *            Offset: 0
 *            Unit: %
 */
struct vehicle_rt_sb_trig_initial_condition_t {
    uint8_t validity_initial_speed;
    uint8_t validity_initial_heading;
    uint32_t initial_speed;
    int16_t initial_heading;
    uint8_t mfdd_start_threshold;
    uint8_t mfdd_end_threshold;
};

/**
 * Signals in message RT_SB_Trig_Direct_Dist.
 *
 * @param direct_distance
 *            Direct distance from start of test to current position
 *            Minimum: 0
 *            Maximum: 4294967
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param path_distance_2_d
 *            2D path distance (horizontal components only)
 *            Minimum: 0
 *            Maximum: 4294967
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_trig_direct_dist_t {
    uint32_t direct_distance;
    uint32_t path_distance_2_d;
};

/**
 * Signals in message RT_SB_Trig_Forward_Dist.
 *
 * @param forward_distance
 *            Current forward distance from start of test in direction of initial heading at start of test
 *            Minimum: -2147483.648
 *            Maximum: 2147483.647
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param deviation_distance
 *            Current deviation distance from a line projected along the initial heading at start of test, +ve for deviation to the right.
 *            Minimum: -2147483.648
 *            Maximum: 2147483.647
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_trig_forward_dist_t {
    int32_t forward_distance;
    int32_t deviation_distance;
};

/**
 * Signals in message RT_SB_Trig_Path_Dist.
 *
 * @param path_distance_3_d
 *            3D path distance
 *            Minimum: 0
 *            Maximum: 4294967
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_trig_path_dist_t {
    uint32_t path_distance_3_d;
};

/**
 * Signals in message RT_SB_Trig_Accel.
 *
 * @param validity_mfdd
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_average_accel
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_triggered_time
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param mfdd
 *            Mean fully-developed decelleration of triggered test.  Thresholds used are as set in the logger configuration.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param average_accel
 *            Average acceleration from start of triggered test to current time.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param triggered_time
 *            Cumulative time from start of triggered test to current time.
 *            Minimum: 0
 *            Maximum: 167772
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: s
 */
struct vehicle_rt_sb_trig_accel_t {
    uint8_t validity_mfdd;
    uint8_t validity_average_accel;
    uint8_t validity_triggered_time;
    int16_t mfdd;
    int16_t average_accel;
    uint32_t triggered_time;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_12.
 *
 * @param measured_time_12
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_12_t {
    uint32_t measured_time_12;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_11.
 *
 * @param measured_time_11
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_11_t {
    uint32_t measured_time_11;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_10.
 *
 * @param measured_time_10
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_10_t {
    uint32_t measured_time_10;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_9.
 *
 * @param measured_time_9
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_9_t {
    uint32_t measured_time_9;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_8.
 *
 * @param measured_time_8
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_8_t {
    uint32_t measured_time_8;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_7.
 *
 * @param measured_time_7
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_7_t {
    uint32_t measured_time_7;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_6.
 *
 * @param measured_time_6
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_6_t {
    uint32_t measured_time_6;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_5.
 *
 * @param measured_time_5
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_5_t {
    uint32_t measured_time_5;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_4.
 *
 * @param measured_time_4
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_4_t {
    uint32_t measured_time_4;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_3.
 *
 * @param measured_time_3
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_3_t {
    uint32_t measured_time_3;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_2.
 *
 * @param measured_time_2
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_2_t {
    uint32_t measured_time_2;
};

/**
 * Signals in message RT_DL1MK3_Measure_Time_1.
 *
 * @param measured_time_1
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_measure_time_1_t {
    uint32_t measured_time_1;
};

/**
 * Signals in message RT_DL1MK3_RPM.
 *
 * @param rpm
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_rpm_t {
    uint16_t rpm;
};

/**
 * Signals in message RT_DL1MK3_Freq_4.
 *
 * @param frequency_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_freq_4_t {
    uint16_t frequency_4;
};

/**
 * Signals in message RT_DL1MK3_Freq_3.
 *
 * @param frequency_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_freq_3_t {
    uint16_t frequency_3;
};

/**
 * Signals in message RT_DL1MK3_Freq_2.
 *
 * @param frequency_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_freq_2_t {
    uint16_t frequency_2;
};

/**
 * Signals in message RT_DL1MK3_Misc_3.
 *
 * @param misc_3
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_misc_3_t {
    uint16_t misc_3;
};

/**
 * Signals in message RT_DL1MK3_Misc_2.
 *
 * @param misc_2
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_misc_2_t {
    uint16_t misc_2;
};

/**
 * Signals in message RT_DL1MK3_Misc_1.
 *
 * @param misc_1
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_misc_1_t {
    uint16_t misc_1;
};

/**
 * Signals in message RT_DL1MK3_Aux_31.
 *
 * @param aux_31
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_31_t {
    uint16_t aux_31;
};

/**
 * Signals in message RT_DL1MK3_Aux_30.
 *
 * @param aux_30
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_30_t {
    uint16_t aux_30;
};

/**
 * Signals in message RT_DL1MK3_Aux_29.
 *
 * @param aux_29
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_29_t {
    uint16_t aux_29;
};

/**
 * Signals in message RT_DL1MK3_Aux_28.
 *
 * @param aux_28
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_28_t {
    uint16_t aux_28;
};

/**
 * Signals in message RT_DL1MK3_Aux_27.
 *
 * @param aux_27
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_27_t {
    uint16_t aux_27;
};

/**
 * Signals in message RT_DL1MK3_Aux_26.
 *
 * @param aux_26
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_26_t {
    uint16_t aux_26;
};

/**
 * Signals in message RT_DL1MK3_Aux_25.
 *
 * @param aux_25
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_25_t {
    uint16_t aux_25;
};

/**
 * Signals in message RT_DL1MK3_Aux_24.
 *
 * @param aux_24
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_24_t {
    uint16_t aux_24;
};

/**
 * Signals in message RT_DL1MK3_Aux_23.
 *
 * @param aux_23
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_23_t {
    uint16_t aux_23;
};

/**
 * Signals in message RT_DL1MK3_Aux_22.
 *
 * @param aux_22
 *            Scale: 10
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_22_t {
    uint16_t aux_22;
};

/**
 * Signals in message RT_DL1MK3_Aux_21.
 *
 * @param aux_21
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_21_t {
    uint16_t aux_21;
};

/**
 * Signals in message RT_DL1MK3_Aux_20.
 *
 * @param aux_20
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_20_t {
    uint16_t aux_20;
};

/**
 * Signals in message RT_DL1MK3_Aux_19.
 *
 * @param aux_19
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_19_t {
    uint16_t aux_19;
};

/**
 * Signals in message RT_DL1MK3_Aux_18.
 *
 * @param aux_18
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_18_t {
    uint16_t aux_18;
};

/**
 * Signals in message RT_DL1MK3_Aux_17.
 *
 * @param aux_17
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_17_t {
    uint16_t aux_17;
};

/**
 * Signals in message RT_DL1MK3_Aux_16.
 *
 * @param aux_16
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_16_t {
    uint16_t aux_16;
};

/**
 * Signals in message RT_DL1MK3_Aux_15.
 *
 * @param aux_15
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_15_t {
    uint16_t aux_15;
};

/**
 * Signals in message RT_DL1MK3_Aux_14.
 *
 * @param aux_14
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_14_t {
    uint16_t aux_14;
};

/**
 * Signals in message RT_DL1MK3_Aux_13.
 *
 * @param aux_13
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_13_t {
    uint16_t aux_13;
};

/**
 * Signals in message RT_DL1MK3_Aux_12.
 *
 * @param aux_12
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_12_t {
    uint16_t aux_12;
};

/**
 * Signals in message RT_DL1MK3_Aux_11.
 *
 * @param aux_11
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_11_t {
    uint16_t aux_11;
};

/**
 * Signals in message RT_DL1MK3_Aux_9.
 *
 * @param aux_9
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_9_t {
    uint16_t aux_9;
};

/**
 * Signals in message RT_DL1MK3_Aux_10.
 *
 * @param aux_10
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_10_t {
    uint16_t aux_10;
};

/**
 * Signals in message RT_DL1MK3_Aux_8.
 *
 * @param aux_8
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_8_t {
    uint16_t aux_8;
};

/**
 * Signals in message RT_DL1MK3_Aux_7.
 *
 * @param aux_7
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_7_t {
    uint16_t aux_7;
};

/**
 * Signals in message RT_DL1MK3_Aux_6.
 *
 * @param aux_6
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_6_t {
    uint16_t aux_6;
};

/**
 * Signals in message RT_DL1MK3_Aux_5.
 *
 * @param aux_5
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_5_t {
    uint16_t aux_5;
};

/**
 * Signals in message RT_DL1MK3_Aux_4.
 *
 * @param aux_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_4_t {
    uint16_t aux_4;
};

/**
 * Signals in message RT_DL1MK3_Aux_3.
 *
 * @param aux_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_3_t {
    uint16_t aux_3;
};

/**
 * Signals in message RT_DL1MK3_Aux_2.
 *
 * @param aux_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_2_t {
    uint16_t aux_2;
};

/**
 * Signals in message RT_DL1MK3_Aux_1.
 *
 * @param aux_1
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_aux_1_t {
    uint16_t aux_1;
};

/**
 * Signals in message RT_DL1MK3_Pressure_5.
 *
 * @param pressure_5
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_pressure_5_t {
    uint32_t pressure_5;
};

/**
 * Signals in message RT_DL1MK3_Pressure_4.
 *
 * @param pressure_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_pressure_4_t {
    uint32_t pressure_4;
};

/**
 * Signals in message RT_DL1MK3_Pressure_3.
 *
 * @param pressure_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_pressure_3_t {
    uint32_t pressure_3;
};

/**
 * Signals in message RT_DL1MK3_Pressure_2.
 *
 * @param pressure_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_pressure_2_t {
    uint32_t pressure_2;
};

/**
 * Signals in message RT_DL1MK3_Pressure_1.
 *
 * @param pressure_1
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_pressure_1_t {
    uint32_t pressure_1;
};

/**
 * Signals in message RT_DL1MK3_Angle_3.
 *
 * @param angle_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_angle_3_t {
    int16_t angle_3;
};

/**
 * Signals in message RT_DL1MK3_Angle_2.
 *
 * @param angle_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_angle_2_t {
    int16_t angle_2;
};

/**
 * Signals in message RT_DL1MK3_Angle_1.
 *
 * @param angle_1
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_angle_1_t {
    int16_t angle_1;
};

/**
 * Signals in message RT_DL1MK3_Temp_25.
 *
 * @param temperature_25
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_25_t {
    int16_t temperature_25;
};

/**
 * Signals in message RT_DL1MK3_Temp_24.
 *
 * @param temperature_24
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_24_t {
    int16_t temperature_24;
};

/**
 * Signals in message RT_DL1MK3_Temp_23.
 *
 * @param temperature_23
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_23_t {
    int16_t temperature_23;
};

/**
 * Signals in message RT_DL1MK3_Temp_22.
 *
 * @param temperature_22
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_22_t {
    int16_t temperature_22;
};

/**
 * Signals in message RT_DL1MK3_Temp_21.
 *
 * @param temperature_21
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_21_t {
    int16_t temperature_21;
};

/**
 * Signals in message RT_DL1MK3_Temp_20.
 *
 * @param temperature_20
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_20_t {
    int16_t temperature_20;
};

/**
 * Signals in message RT_DL1MK3_Temp_19.
 *
 * @param temperature_19
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_19_t {
    int16_t temperature_19;
};

/**
 * Signals in message RT_DL1MK3_Temp_18.
 *
 * @param temperature_18
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_18_t {
    int16_t temperature_18;
};

/**
 * Signals in message RT_DL1MK3_Temp_17.
 *
 * @param temperature_17
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_17_t {
    int16_t temperature_17;
};

/**
 * Signals in message RT_DL1MK3_Temp_16.
 *
 * @param temperature_16
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_16_t {
    int16_t temperature_16;
};

/**
 * Signals in message RT_DL1MK3_Temp_15.
 *
 * @param temperature_15
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_15_t {
    int16_t temperature_15;
};

/**
 * Signals in message RT_DL1MK3_Temp_14.
 *
 * @param temperature_14
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_14_t {
    int16_t temperature_14;
};

/**
 * Signals in message RT_DL1MK3_Temp_13.
 *
 * @param temperature_13
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_13_t {
    int16_t temperature_13;
};

/**
 * Signals in message RT_DL1MK3_Temp_12.
 *
 * @param temperature_12
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_12_t {
    int16_t temperature_12;
};

/**
 * Signals in message RT_DL1MK3_Temp_11.
 *
 * @param temperature_11
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_11_t {
    int16_t temperature_11;
};

/**
 * Signals in message RT_DL1MK3_Temp_10.
 *
 * @param temperature_10
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_10_t {
    int16_t temperature_10;
};

/**
 * Signals in message RT_DL1MK3_Temp_9.
 *
 * @param temperature_9
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_9_t {
    int16_t temperature_9;
};

/**
 * Signals in message RT_DL1MK3_Temp_8.
 *
 * @param temperature_8
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_8_t {
    int16_t temperature_8;
};

/**
 * Signals in message RT_DL1MK3_Temp_7.
 *
 * @param temperature_7
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_7_t {
    int16_t temperature_7;
};

/**
 * Signals in message RT_DL1MK3_Temp_6.
 *
 * @param temperature_6
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_6_t {
    int16_t temperature_6;
};

/**
 * Signals in message RT_DL1MK3_Temp_5.
 *
 * @param temperature_5
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_5_t {
    int16_t temperature_5;
};

/**
 * Signals in message RT_DL1MK3_Temp_4.
 *
 * @param temperature_4
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_4_t {
    int16_t temperature_4;
};

/**
 * Signals in message RT_DL1MK3_Temp_3.
 *
 * @param temperature_3
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_3_t {
    int16_t temperature_3;
};

/**
 * Signals in message RT_DL1MK3_Temp_2.
 *
 * @param temperature_2
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_2_t {
    int16_t temperature_2;
};

/**
 * Signals in message RT_DL1MK3_Temp_1.
 *
 * @param temperature_1
 *            Scale: 0.1
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_temp_1_t {
    int16_t temperature_1;
};

/**
 * Signals in message RT_DL1MK3_Analog_32.
 *
 * @param analog_32
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_32_t {
    uint16_t analog_32;
};

/**
 * Signals in message RT_DL1MK3_Analog_31.
 *
 * @param analog_31
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_31_t {
    uint16_t analog_31;
};

/**
 * Signals in message RT_DL1MK3_Analog_30.
 *
 * @param analog_30
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_30_t {
    uint16_t analog_30;
};

/**
 * Signals in message RT_DL1MK3_Analog_29.
 *
 * @param analog_29
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_29_t {
    uint16_t analog_29;
};

/**
 * Signals in message RT_DL1MK3_Analog_28.
 *
 * @param analog_28
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_28_t {
    uint16_t analog_28;
};

/**
 * Signals in message RT_DL1MK3_Analog_27.
 *
 * @param analog_27
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_27_t {
    uint16_t analog_27;
};

/**
 * Signals in message RT_DL1MK3_Analog_26.
 *
 * @param analog_26
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_26_t {
    uint16_t analog_26;
};

/**
 * Signals in message RT_DL1MK3_Analog_25.
 *
 * @param analog_25
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_25_t {
    uint16_t analog_25;
};

/**
 * Signals in message RT_DL1MK3_Analog_15.
 *
 * @param analog_15
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_15_t {
    uint16_t analog_15;
};

/**
 * Signals in message RT_DL1MK3_Analog_14.
 *
 * @param analog_14
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_14_t {
    uint16_t analog_14;
};

/**
 * Signals in message RT_DL1MK3_Analog_17.
 *
 * @param analog_17
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_17_t {
    uint16_t analog_17;
};

/**
 * Signals in message RT_DL1MK3_Analog_24.
 *
 * @param analog_24
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_24_t {
    uint16_t analog_24;
};

/**
 * Signals in message RT_DL1MK3_Analog_23.
 *
 * @param analog_23
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_23_t {
    uint16_t analog_23;
};

/**
 * Signals in message RT_DL1MK3_Analog_22.
 *
 * @param analog_22
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_22_t {
    uint16_t analog_22;
};

/**
 * Signals in message RT_DL1MK3_Analog_21.
 *
 * @param analog_21
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_21_t {
    uint16_t analog_21;
};

/**
 * Signals in message RT_DL1MK3_Analog_20.
 *
 * @param analog_20
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_20_t {
    uint16_t analog_20;
};

/**
 * Signals in message RT_DL1MK3_Analog_19.
 *
 * @param analog_19
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_19_t {
    uint16_t analog_19;
};

/**
 * Signals in message RT_DL1MK3_Analog_16.
 *
 * @param analog_16
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_16_t {
    uint16_t analog_16;
};

/**
 * Signals in message RT_DL1MK3_Analog_18.
 *
 * @param analog_18
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_18_t {
    uint16_t analog_18;
};

/**
 * Signals in message RT_DL1MK3_Analog_12.
 *
 * @param analog_12
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_12_t {
    uint16_t analog_12;
};

/**
 * Signals in message RT_DL1MK3_Analog_11.
 *
 * @param analog_11
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_11_t {
    uint16_t analog_11;
};

/**
 * Signals in message RT_DL1MK3_Analog_10.
 *
 * @param analog_10
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_10_t {
    uint16_t analog_10;
};

/**
 * Signals in message RT_DL1MK3_Analog_9.
 *
 * @param analog_9
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_9_t {
    uint16_t analog_9;
};

/**
 * Signals in message RT_DL1MK3_Analog_8.
 *
 * @param analog_8
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_8_t {
    uint16_t analog_8;
};

/**
 * Signals in message RT_DL1MK3_Analog_7.
 *
 * @param analog_7
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_7_t {
    uint16_t analog_7;
};

/**
 * Signals in message RT_DL1MK3_Analog_6.
 *
 * @param analog_6
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_6_t {
    uint16_t analog_6;
};

/**
 * Signals in message RT_DL1MK3_Analog_5.
 *
 * @param analog_5
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_5_t {
    uint16_t analog_5;
};

/**
 * Signals in message RT_DL1MK3_Analog_4.
 *
 * @param analog_4
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_4_t {
    uint16_t analog_4;
};

/**
 * Signals in message RT_DL1MK3_Analog_3.
 *
 * @param analog_3
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_3_t {
    uint16_t analog_3;
};

/**
 * Signals in message RT_DL1MK3_Analog_2.
 *
 * @param analog_2
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_2_t {
    uint16_t analog_2;
};

/**
 * Signals in message RT_DL1MK3_Analog_1.
 *
 * @param analog_1
 *            Scale: 0.001
 *            Offset: 0
 */
struct vehicle_rt_dl1_mk3_analog_1_t {
    uint16_t analog_1;
};

/**
 * Signals in message RT_DL1MK3_Accel.
 *
 * @param validity_accel_longitudinal
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_lateral
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_vertical
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_accel
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accel_longitudinal
 *            Longitudinal acceleration.  This is positive when the vehicle accelerates in a forwards direction.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_lateral
 *            Lateral acceleration.  This is positive when the vehicle accelerates towards the right, e.g. when cornering around a right-hand bend.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_vertical
 *            Vertical acceleration.  This is positive when the vehicle accelerates in an upwards direction, e.g. when travelling through a dip.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 */
struct vehicle_rt_dl1_mk3_accel_t {
    uint8_t validity_accel_longitudinal;
    uint8_t validity_accel_lateral;
    uint8_t validity_accel_vertical;
    uint8_t accuracy_accel;
    int16_t accel_longitudinal;
    int16_t accel_lateral;
    int16_t accel_vertical;
};

/**
 * Signals in message RT_SB_INS_Vpt_4_Vel_NED_2.
 *
 * @param virtual_4_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_4_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param virtual_4_slip
 *            Slip is defined as the difference between yaw and heading.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_vpt_4_vel_ned_2_t {
    int32_t virtual_4_vel_ned_d;
    int16_t virtual_4_heading;
    int16_t virtual_4_slip;
};

/**
 * Signals in message RT_SB_INS_Vpt_4_Vel_NED_1.
 *
 * @param virtual_4_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_4_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vpt_4_vel_ned_1_t {
    int32_t virtual_4_vel_ned_n;
    int32_t virtual_4_vel_ned_e;
};

/**
 * Signals in message RT_SB_INS_Vpt_4_Offset.
 *
 * @param virtual_4_offset_x
 *            X offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_4_offset_y
 *            Y offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_4_offset_z
 *            Z offset (+ve downwards) of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_vpt_4_offset_t {
    int16_t virtual_4_offset_x;
    int16_t virtual_4_offset_y;
    int16_t virtual_4_offset_z;
};

/**
 * Signals in message RT_SB_INS_Vpt_3_Vel_NED_2.
 *
 * @param virtual_3_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_3_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param virtual_3_slip
 *            Slip is defined as the difference between yaw and heading.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_vpt_3_vel_ned_2_t {
    int32_t virtual_3_vel_ned_d;
    int16_t virtual_3_heading;
    int16_t virtual_3_slip;
};

/**
 * Signals in message RT_SB_INS_Vpt_3_Vel_NED_1.
 *
 * @param virtual_3_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_3_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vpt_3_vel_ned_1_t {
    int32_t virtual_3_vel_ned_n;
    int32_t virtual_3_vel_ned_e;
};

/**
 * Signals in message RT_SB_INS_Vpt_3_Offset.
 *
 * @param virtual_3_offset_x
 *            X offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_3_offset_y
 *            Y offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_3_offset_z
 *            Z offset (+ve downwards) of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_vpt_3_offset_t {
    int16_t virtual_3_offset_x;
    int16_t virtual_3_offset_y;
    int16_t virtual_3_offset_z;
};

/**
 * Signals in message RT_SB_INS_Vpt_2_Vel_NED_2.
 *
 * @param virtual_2_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_2_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param virtual_2_slip
 *            Slip is defined as the difference between yaw and heading.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_vpt_2_vel_ned_2_t {
    int32_t virtual_2_vel_ned_d;
    int16_t virtual_2_heading;
    int16_t virtual_2_slip;
};

/**
 * Signals in message RT_SB_INS_Vpt_2_Vel_NED_1.
 *
 * @param virtual_2_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_2_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vpt_2_vel_ned_1_t {
    int32_t virtual_2_vel_ned_n;
    int32_t virtual_2_vel_ned_e;
};

/**
 * Signals in message RT_SB_INS_Vpt_2_Offset.
 *
 * @param virtual_2_offset_x
 *            X offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_2_offset_y
 *            Y offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_2_offset_z
 *            Z offset (+ve downwards) of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_vpt_2_offset_t {
    int16_t virtual_2_offset_x;
    int16_t virtual_2_offset_y;
    int16_t virtual_2_offset_z;
};

/**
 * Signals in message RT_SB_INS_Vpt_1_Vel_NED_2.
 *
 * @param virtual_1_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_1_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param virtual_1_slip
 *            Slip is defined as the difference between yaw and heading.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_vpt_1_vel_ned_2_t {
    int32_t virtual_1_vel_ned_d;
    int16_t virtual_1_heading;
    int16_t virtual_1_slip;
};

/**
 * Signals in message RT_SB_INS_Vpt_1_Vel_NED_1.
 *
 * @param virtual_1_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param virtual_1_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vpt_1_vel_ned_1_t {
    int32_t virtual_1_vel_ned_n;
    int32_t virtual_1_vel_ned_e;
};

/**
 * Signals in message RT_SB_INS_Vpt_1_Offset.
 *
 * @param virtual_1_offset_x
 *            X offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_1_offset_y
 *            Y offset of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 * @param virtual_1_offset_z
 *            Z offset (+ve downwards) of the virtual point in the vehicle body frame.
 *            Minimum: -32.768
 *            Maximum: 32.767
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_vpt_1_offset_t {
    int16_t virtual_1_offset_x;
    int16_t virtual_1_offset_y;
    int16_t virtual_1_offset_z;
};

/**
 * Signals in message RT_SB_INS_Slip.
 *
 * @param validity_ins_slip
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_squat
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_slip
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_slip
 *            Slip is defined as the difference between yaw and heading
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param accuracy_ins_squat
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_squat
 *            Squat is defined as the difference between pitch and gradient
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_slip_t {
    uint8_t validity_ins_slip;
    uint8_t validity_ins_squat;
    uint8_t accuracy_ins_slip;
    int16_t ins_slip;
    uint8_t accuracy_ins_squat;
    int16_t ins_squat;
};

/**
 * Signals in message RT_SB_INS_Vel_ECEF_2.
 *
 * @param validity_ins_vel_ecef_y
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_vel_ecef_z
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param ins_vel_ecef_y
 *            ECEF Y velocity.  The ECEF Y axis originates from the Earth centre, and the positive Y axis intersects the Earth surface at zero degrees latittude and 90 degrees longitude.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param ins_vel_ecef_z
 *            ECEF Z velocity.  The ECEF Z axis originates from the Earth centre, and the positive Z axis intersects the Earth surface at the North Pole.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vel_ecef_2_t {
    uint8_t validity_ins_vel_ecef_y;
    uint8_t validity_ins_vel_ecef_z;
    int32_t ins_vel_ecef_y;
    int32_t ins_vel_ecef_z;
};

/**
 * Signals in message RT_SB_INS_Vel_ECEF_1.
 *
 * @param validity_ins_vel_ecef_x
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_ecef_x
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_ecef_y
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_ecef_z
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_vel_ecef_x
 *            ECEF X velocity.  The ECEF X axis originates from the Earth centre, and the positive X axis intersects the Earth surface at zero degrees latittude and zero degrees longitude (the intersection of the equator and the prime meridian).
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vel_ecef_1_t {
    uint8_t validity_ins_vel_ecef_x;
    uint8_t accuracy_ins_vel_ecef_x;
    uint8_t accuracy_ins_vel_ecef_y;
    uint8_t accuracy_ins_vel_ecef_z;
    int32_t ins_vel_ecef_x;
};

/**
 * Signals in message RT_SB_INS_Vel_NED_2.
 *
 * @param validity_ins_vel_ned_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_d
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vel_ned_2_t {
    uint8_t validity_ins_vel_ned_d;
    uint8_t accuracy_ins_vel_d;
    int32_t ins_vel_ned_d;
};

/**
 * Signals in message RT_SB_INS_Vel_NED_1.
 *
 * @param validity_ins_vel_ned_n
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_vel_ned_e
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_vel_ne
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param ins_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_ins_vel_ned_1_t {
    uint8_t validity_ins_vel_ned_n;
    uint8_t validity_ins_vel_ned_e;
    uint8_t accuracy_ins_vel_ne;
    int32_t ins_vel_ned_n;
    int32_t ins_vel_ned_e;
};

/**
 * Signals in message RT_SB_INS_Pos_ECEF_2.
 *
 * @param ins_pos_ecef_y
 *            ECEF Y position.  The ECEF Y axis originates from the Earth centre, and the positive Y axis intersects the Earth surface at zero degrees latittude and 90 degrees longitude.
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 * @param ins_pos_ecef_z
 *            ECEF Z position.  The ECEF Z axis originates from the Earth centre, and the positive Z axis intersects the Earth surface at the North Pole.
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_pos_ecef_2_t {
    int32_t ins_pos_ecef_y;
    int32_t ins_pos_ecef_z;
};

/**
 * Signals in message RT_SB_INS_Pos_ECEF_1.
 *
 * @param validity_ins_pos_ecef_x
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_pos_ecef_y
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_pos_ecef_z
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_ecef_x
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_ecef_y
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_ecef_z
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_pos_ecef_x
 *            ECEF X position.  The ECEF X axis originates from the Earth centre, and the positive X axis intersects the Earth surface at zero degrees latittude and zero degrees longitude (the intersection of the equator and the prime meridian).
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_pos_ecef_1_t {
    uint8_t validity_ins_pos_ecef_x;
    uint8_t validity_ins_pos_ecef_y;
    uint8_t validity_ins_pos_ecef_z;
    uint8_t accuracy_ins_pos_ecef_x;
    uint8_t accuracy_ins_pos_ecef_y;
    uint8_t accuracy_ins_pos_ecef_z;
    int32_t ins_pos_ecef_x;
};

/**
 * Signals in message RT_SB_INS_Pos_LLH_2.
 *
 * @param ins_pos_llh_longitude
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 * @param ins_pos_llh_altitude
 *            Minimum: -1000
 *            Maximum: 100000
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_ins_pos_llh_2_t {
    int32_t ins_pos_llh_longitude;
    int32_t ins_pos_llh_altitude;
};

/**
 * Signals in message RT_SB_INS_Pos_LLH_1.
 *
 * @param validity_ins_pos_llh_latitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_pos_llh_longitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_pos_llh_altitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_llh_latitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_llh_longitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_pos_llh_altitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_pos_llh_latitude
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_pos_llh_1_t {
    uint8_t validity_ins_pos_llh_latitude;
    uint8_t validity_ins_pos_llh_longitude;
    uint8_t validity_ins_pos_llh_altitude;
    uint8_t accuracy_ins_pos_llh_latitude;
    uint8_t accuracy_ins_pos_llh_longitude;
    uint8_t accuracy_ins_pos_llh_altitude;
    int32_t ins_pos_llh_latitude;
};

/**
 * Signals in message RT_SB_INS_Heading_Gradient_2.
 *
 * @param validity_ins_heading
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_gradient
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_heading
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_heading_2
 *            This is GPS heading in the range 0 - 360°, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: 0
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param accuracy_ins_gradient
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_gradient
 *            This is GPS gradient, i.e. the vertical direction that the vehicle is travelling, NOT pointing (pitch).
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_heading_gradient_2_t {
    uint8_t validity_ins_heading;
    uint8_t validity_ins_gradient;
    uint8_t accuracy_ins_heading;
    uint16_t ins_heading_2;
    uint8_t accuracy_ins_gradient;
    int16_t ins_gradient;
};

/**
 * Signals in message RT_SB_INS_Heading_Gradient.
 *
 * @param validity_ins_heading
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_ins_gradient
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_ins_heading
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param accuracy_ins_gradient
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param ins_gradient
 *            This is GPS gradient, i.e. the vertical direction that the vehicle is travelling, NOT pointing (pitch).
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_heading_gradient_t {
    uint8_t validity_ins_heading;
    uint8_t validity_ins_gradient;
    uint8_t accuracy_ins_heading;
    int16_t ins_heading;
    uint8_t accuracy_ins_gradient;
    int16_t ins_gradient;
};

/**
 * Signals in message RT_SB_INS_Status.
 *
 * @param ins_status
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_sb_ins_status_t {
    uint8_t ins_status;
};

/**
 * Signals in message RT_SB_INS_Attitude.
 *
 * @param validity_yaw
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_pitch
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_roll
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_attitude
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param attitude_yaw
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param attitude_pitch
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param attitude_roll
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_ins_attitude_t {
    uint8_t validity_yaw;
    uint8_t validity_pitch;
    uint8_t validity_roll;
    uint8_t accuracy_attitude;
    int16_t attitude_yaw;
    int16_t attitude_pitch;
    int16_t attitude_roll;
};

/**
 * Signals in message RT_SB_Output_Status.
 *
 * @param validity_status_timestamp
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param status_analogue_1
 *            Analogue output status for channel 1.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_analogue_2
 *            Analogue output status for channel 1.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_analogue_3
 *            Analogue output status for channel 3.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_analogue_4
 *            Analogue output status for channel 4.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_pulse_output
 *            Pulse output activity status
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_serial_output_1
 *            Status output of serial port 1
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_serial_output_2
 *            Status output of serial port 1
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param status_trigger
 *            Status of the trigger input
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param gps_time
 *            GPS time is the time in seconds since midnight GMT on Saturday night.
 *            Minimum: 0
 *            Maximum: 604800
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: s
 */
struct vehicle_rt_sb_output_status_t {
    uint8_t validity_status_timestamp;
    uint8_t status_analogue_1;
    uint8_t status_analogue_2;
    uint8_t status_analogue_3;
    uint8_t status_analogue_4;
    uint8_t status_pulse_output;
    uint8_t status_serial_output_1;
    uint8_t status_serial_output_2;
    uint8_t status_trigger;
    uint32_t gps_time;
};

/**
 * Signals in message RT_SB_GPS_Heading_Gradient_2.
 *
 * @param validity_gps_heading
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_gradient
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_heading
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_heading_2
 *            This is GPS heading in the range 0 - 360°, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: 0
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param accuracy_gps_gradient
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_gradient
 *            This is GPS gradient, i.e. the vertical direction that the vehicle is travelling, NOT pointing (pitch).
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_gps_heading_gradient_2_t {
    uint8_t validity_gps_heading;
    uint8_t validity_gps_gradient;
    uint8_t accuracy_gps_heading;
    uint16_t gps_heading_2;
    uint8_t accuracy_gps_gradient;
    int16_t gps_gradient;
};

/**
 * Signals in message RT_SB_Cumulative_Distance_2.
 *
 * @param validity_cumulative_time
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_cumulative_distance
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param cumulative_time
 *            Minimum: 0
 *            Maximum: 167772
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: s
 * @param cumulative_distance
 *            Minimum: 0
 *            Maximum: 4294967
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_cumulative_distance_2_t {
    uint8_t validity_cumulative_time;
    uint8_t validity_cumulative_distance;
    uint32_t cumulative_time;
    uint32_t cumulative_distance;
};

/**
 * Signals in message RT_SB_Cumulative_Distance_1.
 *
 * @param validity_cumulative_time
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_cumulative_distance
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param cumulative_time
 *            Minimum: 0
 *            Maximum: 167772
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: s
 * @param cumulative_distance
 *            Minimum: 0
 *            Maximum: 4294967
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_cumulative_distance_1_t {
    uint8_t validity_cumulative_time;
    uint8_t validity_cumulative_distance;
    uint32_t cumulative_time;
    uint32_t cumulative_distance;
};

/**
 * Signals in message RT_SB_Trigger_Timestamp.
 *
 * @param validity_trigger_timestamp
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_trigger_timestamp
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param trigger_number
 *            This is the ID of the trigger that generated the event, as marked on the case of the logger
 *            Minimum: 0
 *            Maximum: 128
 *            Scale: 1
 *            Offset: 1
 * @param trigger_timestamp_type
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param gps_high_resolution_time
 *            GPS time of week to micro-second resolution.
 *            Minimum: 0
 *            Maximum: 604800
 *            Scale: 1e-06
 *            Offset: 0
 *            Unit: s
 */
struct vehicle_rt_sb_trigger_timestamp_t {
    uint8_t validity_trigger_timestamp;
    uint8_t accuracy_trigger_timestamp;
    uint8_t trigger_number;
    uint8_t trigger_timestamp_type;
    uint64_t gps_high_resolution_time;
};

/**
 * Signals in message RT_IMU06_Gyro_Rates.
 *
 * @param validity_gyro_rate_yaw
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gyro_rate_pitch
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gyro_rate_roll
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gyro_rates
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Scale: 1
 *            Offset: 0
 * @param gyro_rate_yaw
 *            Yaw rate is positive for clockwise rotation when looking down on the vehicle from above.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 * @param gyro_rate_pitch
 *            Pitch rate is positive for clockwise rotation when looking at the left hand side of the vehicle from the left of the vehicle.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 * @param gyro_rate_roll
 *            Roll rate is positive for clockwise rotation when looking at the rear of the vehicle from behind the vehicle.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 */
struct vehicle_rt_imu06_gyro_rates_t {
    uint8_t validity_gyro_rate_yaw;
    uint8_t validity_gyro_rate_pitch;
    uint8_t validity_gyro_rate_roll;
    uint8_t accuracy_gyro_rates;
    int16_t gyro_rate_yaw;
    int16_t gyro_rate_pitch;
    int16_t gyro_rate_roll;
};

/**
 * Signals in message RT_IMU06_Accel.
 *
 * @param validity_accel_longitudinal
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_lateral
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_vertical
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_accel
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accel_longitudinal
 *            Longitudinal acceleration.  This is positive when the vehicle accelerates in a forwards direction.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_lateral
 *            Lateral acceleration.  This is positive when the vehicle accelerates towards the right, e.g. when cornering around a right-hand bend.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_vertical
 *            Vertical acceleration.  This is positive when the vehicle accelerates in an upwards direction, e.g. when travelling through a dip.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 */
struct vehicle_rt_imu06_accel_t {
    uint8_t validity_accel_longitudinal;
    uint8_t validity_accel_lateral;
    uint8_t validity_accel_vertical;
    uint8_t accuracy_accel;
    int16_t accel_longitudinal;
    int16_t accel_lateral;
    int16_t accel_vertical;
};

/**
 * Signals in message RT_SB_Speed.
 *
 * @param validity_speed
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_speed
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param speed
 *            Minimum: -20000
 *            Maximum: 20000
 *            Scale: 1e-05
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_speed_t {
    uint8_t validity_speed;
    uint8_t accuracy_speed;
    int32_t speed;
};

/**
 * Signals in message RT_SB_RTK_Slip.
 *
 * @param validity_rtk_slip
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_rtk_squat
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_rtk_baseline
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_rtk_baseline
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param rtk_slip
 *            Slip is defined as the difference between yaw and heading.
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param rtk_squat
 *            Squat is defined as the difference between pitch and gradient.
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param rtk_baseline
 *            This is the estimated baseline length calculated by the RTK solution.
 *            Minimum: 0
 *            Maximum: 65535
 *            Scale: 1
 *            Offset: 0
 *            Unit: mm
 */
struct vehicle_rt_sb_rtk_slip_t {
    uint8_t validity_rtk_slip;
    uint8_t validity_rtk_squat;
    uint8_t validity_rtk_baseline;
    uint8_t accuracy_rtk_baseline;
    int16_t rtk_slip;
    int16_t rtk_squat;
    uint16_t rtk_baseline;
};

/**
 * Signals in message RT_SB_RTK_Attitude.
 *
 * @param validity_rtk_yaw
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_rtk_pitch
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_rtk_roll
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_rtk_attitude
 *            Note that RTK yaw is typically up to about 4 times more accurate than RTK pitch or roll.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param rtk_attitude_yaw
 *            RTK attitude is determined from the MB-RTK solution only.  Yaw is positive for a clockwise rotational displacement from due North, looking down on the vehicle from above.
 *            Minimum: -360
 *            Maximum: 360
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param rtk_attitude_pitch
 *            RTK attitude is determined from the MB-RTK solution only.  Pitch is positive for a clockwise rotational displacement from the local horizontal plane when looking at the vehicle from the left hand side of it.
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param rtk_attitude_roll
 *            RTK attitude is determined from the MB-RTK solution only.  Roll is positive for a clockwise rotational displacement relative to the local horizontal plane when looking at the vehicle from the rear of it.
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_rtk_attitude_t {
    uint8_t validity_rtk_yaw;
    uint8_t validity_rtk_pitch;
    uint8_t validity_rtk_roll;
    uint8_t accuracy_rtk_attitude;
    int16_t rtk_attitude_yaw;
    int16_t rtk_attitude_pitch;
    int16_t rtk_attitude_roll;
};

/**
 * Signals in message RT_SB_GPS_Mcycle_Lean.
 *
 * @param validity_gps_lateral_accel
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_mcycle_lean
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_lateral_accel
 *            This accuracy value applies to both GPS-derived lateral acceleration and motorcycle lean angle, since both are derived from the rate of change of GPS heading.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_lateral_accel
 *            GPS-derived lateral acceleration.  This is derived by differentiating GPS heading - it is much more noisy than lateral accel from the accelerometers, but useful for m/cycle applications.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param gps_mcycle_lean_angle
 *            Motorcycle lean angle, derived from rate of change of heading from GPS.  This is the lean angle of the centre of mass of the combined bike + rider.
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_gps_mcycle_lean_t {
    uint8_t validity_gps_lateral_accel;
    uint8_t validity_gps_mcycle_lean;
    uint8_t accuracy_gps_lateral_accel;
    int16_t gps_lateral_accel;
    int16_t gps_mcycle_lean_angle;
};

/**
 * Signals in message RT_SB_GPS_Status.
 *
 * @param gps_status
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param firmware_version_major
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param firmware_version_intermediate
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param firmware_version_minor
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_n_sv
 *            Number of satellites used in GPS solution
 *            Minimum: 0
 *            Maximum: 16
 *            Scale: 1
 *            Offset: 0
 * @param gps_n_sv_2
 *            Number of satellites used in GPS solution by module 2 on RTK units.
 *            Minimum: 0
 *            Maximum: 16
 *            Scale: 1
 *            Offset: 0
 * @param gps_n_sv_rtk
 *            Number of common satellites available to RTK solution
 *            Minimum: 0
 *            Maximum: 16
 *            Scale: 1
 *            Offset: 0
 * @param rtk_status
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_sb_gps_status_t {
    uint8_t gps_status;
    uint8_t firmware_version_major;
    uint8_t firmware_version_intermediate;
    uint8_t firmware_version_minor;
    uint8_t gps_n_sv;
    uint8_t gps_n_sv_2;
    uint8_t gps_n_sv_rtk;
    uint8_t rtk_status;
};

/**
 * Signals in message RT_SB_GPS_Pos_ECEF_2.
 *
 * @param gps_pos_ecef_y
 *            ECEF Y position.  The ECEF Y axis originates from the Earth centre, and the positive Y axis intersects the Earth surface at zero degrees latittude and 90 degrees longitude.
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 * @param gps_pos_ecef_z
 *            ECEF Z position.  The ECEF Z axis originates from the Earth centre, and the positive Z axis intersects the Earth surface at the North Pole.
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_gps_pos_ecef_2_t {
    int32_t gps_pos_ecef_y;
    int32_t gps_pos_ecef_z;
};

/**
 * Signals in message RT_SB_GPS_Pos_ECEF_1.
 *
 * @param validity_gps_pos_ecef_x
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_ecef_y
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_ecef_z
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_ecef_x
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_ecef_y
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_ecef_z
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_pos_ecef_x
 *            ECEF X position.  The ECEF X axis originates from the Earth centre, and the positive X axis intersects the Earth surface at zero degrees latittude and zero degrees longitude (the intersection of the equator and the prime meridian).
 *            Minimum: -10000000
 *            Maximum: 10000000
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_gps_pos_ecef_1_t {
    uint8_t validity_gps_pos_ecef_x;
    uint8_t validity_gps_pos_ecef_y;
    uint8_t validity_gps_pos_ecef_z;
    uint8_t accuracy_gps_pos_ecef_x;
    uint8_t accuracy_gps_pos_ecef_y;
    uint8_t accuracy_gps_pos_ecef_z;
    int32_t gps_pos_ecef_x;
};

/**
 * Signals in message RT_SB_GPS_Pos_LLH_2.
 *
 * @param gps_pos_llh_longitude
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 * @param gps_pos_llh_altitude
 *            Minimum: -1000
 *            Maximum: 100000
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: m
 */
struct vehicle_rt_sb_gps_pos_llh_2_t {
    int32_t gps_pos_llh_longitude;
    int32_t gps_pos_llh_altitude;
};

/**
 * Signals in message RT_SB_GPS_Pos_LLH_1.
 *
 * @param validity_gps_pos_llh_latitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_llh_longitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_pos_llh_altitude
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_latitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_longitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_pos_llh_altitude
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_pos_llh_latitude
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 1e-07
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_gps_pos_llh_1_t {
    uint8_t validity_gps_pos_llh_latitude;
    uint8_t validity_gps_pos_llh_longitude;
    uint8_t validity_gps_pos_llh_altitude;
    uint8_t accuracy_gps_pos_llh_latitude;
    uint8_t accuracy_gps_pos_llh_longitude;
    uint8_t accuracy_gps_pos_llh_altitude;
    int32_t gps_pos_llh_latitude;
};

/**
 * Signals in message RT_SB_GPS_Heading_Gradient.
 *
 * @param validity_gps_heading
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_gradient
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_heading
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_heading
 *            This is GPS heading, the direction that the vehicle is travelling in the local horizontal plane.
 *            Minimum: -180
 *            Maximum: 180
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 * @param accuracy_gps_gradient
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_gradient
 *            This is GPS gradient, i.e. the vertical direction that the vehicle is travelling, NOT pointing (pitch).
 *            Minimum: -90
 *            Maximum: 90
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees
 */
struct vehicle_rt_sb_gps_heading_gradient_t {
    uint8_t validity_gps_heading;
    uint8_t validity_gps_gradient;
    uint8_t accuracy_gps_heading;
    int16_t gps_heading;
    uint8_t accuracy_gps_gradient;
    int16_t gps_gradient;
};

/**
 * Signals in message RT_SB_GPS_Vel_ECEF_2.
 *
 * @param validity_gps_vel_ecef_y
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_vel_ecef_z
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param gps_vel_ecef_y
 *            ECEF Y velocity.  The ECEF Y axis originates from the Earth centre, and the positive Y axis intersects the Earth surface at zero degrees latittude and 90 degrees longitude.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param gps_vel_ecef_z
 *            ECEF Z velocity.  The ECEF Z axis originates from the Earth centre, and the positive Z axis intersects the Earth surface at the North Pole.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_gps_vel_ecef_2_t {
    uint8_t validity_gps_vel_ecef_y;
    uint8_t validity_gps_vel_ecef_z;
    int32_t gps_vel_ecef_y;
    int32_t gps_vel_ecef_z;
};

/**
 * Signals in message RT_SB_GPS_Vel_ECEF_1.
 *
 * @param validity_gps_vel_ecef_x
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_vel_ecef_x
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_vel_ecef_y
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_vel_ecef_z
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_vel_ecef_x
 *            ECEF X velocity.  The ECEF X axis originates from the Earth centre, and the positive X axis intersects the Earth surface at zero degrees latittude and zero degrees longitude (the intersection of the equator and the prime meridian).
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_gps_vel_ecef_1_t {
    uint8_t validity_gps_vel_ecef_x;
    uint8_t accuracy_gps_vel_ecef_x;
    uint8_t accuracy_gps_vel_ecef_y;
    uint8_t accuracy_gps_vel_ecef_z;
    int32_t gps_vel_ecef_x;
};

/**
 * Signals in message RT_SB_GPS_Vel_NED_2.
 *
 * @param validity_gps_vel_ned_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_vel_d
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_vel_ned_d
 *            VELNED D velocity.  This is the velocity vector directly downwards towards the Earth centre at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_gps_vel_ned_2_t {
    uint8_t validity_gps_vel_ned_d;
    uint8_t accuracy_gps_vel_d;
    int32_t gps_vel_ned_d;
};

/**
 * Signals in message RT_SB_GPS_Vel_NED_1.
 *
 * @param validity_gps_vel_ned_n
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_vel_ned_e
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_vel_ne
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_vel_ned_n
 *            VELNED N velocity.  This is the velocity vector directly North at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param gps_vel_ned_e
 *            VELNED E velocity.  This is the velocity vector directly East at the current local Earth surface position.
 *            Minimum: -838
 *            Maximum: 838
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_gps_vel_ned_1_t {
    uint8_t validity_gps_vel_ned_n;
    uint8_t validity_gps_vel_ned_e;
    uint8_t accuracy_gps_vel_ne;
    int32_t gps_vel_ned_n;
    int32_t gps_vel_ned_e;
};

/**
 * Signals in message RT_SB_GPS_Speed.
 *
 * @param validity_gps_speed_2_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_speed_3_d
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_speed
 *            This accuracy value applies to both 2D and 3D GPS speed.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_speed_2_d
 *            This is GPS scalar 2D speed - scalar speed with no local Z axis component included.
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 * @param gps_speed_3_d
 *            This is GPS scalar 3D speed - scalar speed with the local Z axis component included.
 *            Minimum: 0
 *            Maximum: 1675
 *            Scale: 0.0001
 *            Offset: 0
 *            Unit: m/s
 */
struct vehicle_rt_sb_gps_speed_t {
    uint8_t validity_gps_speed_2_d;
    uint8_t validity_gps_speed_3_d;
    uint8_t accuracy_gps_speed;
    uint32_t gps_speed_2_d;
    uint32_t gps_speed_3_d;
};

/**
 * Signals in message RT_SB_GPS_Time.
 *
 * @param validity_gps_time
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gps_week
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gps_time
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param gps_time
 *            GPS time is the time in seconds since midnight GMT on Saturday night.
 *            Minimum: 0
 *            Maximum: 604800
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: s
 * @param gps_week
 *            Minimum: 0
 *            Maximum: 65535
 *            Scale: 1
 *            Offset: 0
 */
struct vehicle_rt_sb_gps_time_t {
    uint8_t validity_gps_time;
    uint8_t validity_gps_week;
    uint8_t accuracy_gps_time;
    uint32_t gps_time;
    uint16_t gps_week;
};

/**
 * Signals in message RT_SB_Accel.
 *
 * @param validity_accel_longitudinal
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_lateral
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param validity_accel_vertical
 *            Valid when bit is set, invalid when bit is clear.
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_accel
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Minimum: 0
 *            Maximum: 255
 *            Scale: 1
 *            Offset: 0
 * @param accel_longitudinal
 *            Longitudinal acceleration.  This is positive when the vehicle accelerates in a forwards direction.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_lateral
 *            Lateral acceleration.  This is positive when the vehicle accelerates towards the right, e.g. when cornering around a right-hand bend.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 * @param accel_vertical
 *            Vertical acceleration.  This is positive when the vehicle accelerates in an upwards direction, e.g. when travelling through a dip.
 *            Minimum: -65
 *            Maximum: 65
 *            Scale: 0.001
 *            Offset: 0
 *            Unit: g
 */
struct vehicle_rt_sb_accel_t {
    uint8_t validity_accel_longitudinal;
    uint8_t validity_accel_lateral;
    uint8_t validity_accel_vertical;
    uint8_t accuracy_accel;
    int16_t accel_longitudinal;
    int16_t accel_lateral;
    int16_t accel_vertical;
};

/**
 * Signals in message RT_SB_Gyro_Rates.
 *
 * @param validity_gyro_rate_yaw
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gyro_rate_pitch
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param validity_gyro_rate_roll
 *            Valid when bit is set, invalid when bit is clear.
 *            Minimum: 0
 *            Maximum: 1
 *            Scale: 1
 *            Offset: 0
 * @param accuracy_gyro_rates
 *            Dimensionless.  Lower values imply but do not guarantee better accuracy than higher values.
 *            Scale: 1
 *            Offset: 0
 * @param gyro_rate_yaw
 *            Yaw rate is positive for clockwise rotation when looking down on the vehicle from above.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 * @param gyro_rate_pitch
 *            Pitch rate is positive for clockwise rotation when looking at the left hand side of the vehicle from the left of the vehicle.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 * @param gyro_rate_roll
 *            Roll rate is positive for clockwise rotation when looking at the rear of the vehicle from behind the vehicle.
 *            Minimum: -327
 *            Maximum: 327
 *            Scale: 0.01
 *            Offset: 0
 *            Unit: degrees/s
 */
struct vehicle_rt_sb_gyro_rates_t {
    uint8_t validity_gyro_rate_yaw;
    uint8_t validity_gyro_rate_pitch;
    uint8_t validity_gyro_rate_roll;
    uint8_t accuracy_gyro_rates;
    int16_t gyro_rate_yaw;
    int16_t gyro_rate_pitch;
    int16_t gyro_rate_roll;
};

/**
 * Encode message RT_SB_INS_Vel_Body_Axes.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vel_body_axes_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vel_body_axes_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vel_Body_Axes.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vel_body_axes_decode(
    struct vehicle_rt_sb_ins_vel_body_axes_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Speed.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_speed_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_speed_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Speed.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_speed_decode(
    struct vehicle_rt_dl1_mk3_speed_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_GPS_Time.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_gps_time_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_gps_time_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_GPS_Time.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_gps_time_decode(
    struct vehicle_rt_dl1_mk3_gps_time_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_GPS_Pos_LLH_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_gps_pos_llh_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_gps_pos_llh_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_GPS_Pos_LLH_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_gps_pos_llh_2_decode(
    struct vehicle_rt_dl1_mk3_gps_pos_llh_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_GPS_Pos_LLH_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_gps_pos_llh_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_gps_pos_llh_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_GPS_Pos_LLH_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_gps_pos_llh_1_decode(
    struct vehicle_rt_dl1_mk3_gps_pos_llh_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_GPS_Speed.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_gps_speed_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_gps_speed_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_GPS_Speed.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_gps_speed_decode(
    struct vehicle_rt_dl1_mk3_gps_speed_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_7.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_7_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_7_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_7.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_7_decode(
    struct vehicle_rt_ir_temp_temp_7_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_RR_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_rr_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_rr_2_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_RR_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_rr_2_decode(
    struct vehicle_rt_ir_temp_temp_rr_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_RL_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_rl_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_rl_2_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_RL_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_rl_2_decode(
    struct vehicle_rt_ir_temp_temp_rl_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_FR_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_fr_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_fr_2_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_FR_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_fr_2_decode(
    struct vehicle_rt_ir_temp_temp_fr_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_FL_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_fl_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_fl_2_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_FL_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_fl_2_decode(
    struct vehicle_rt_ir_temp_temp_fl_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_RR_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_rr_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_rr_1_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_RR_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_rr_1_decode(
    struct vehicle_rt_ir_temp_temp_rr_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_RL_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_rl_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_rl_1_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_RL_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_rl_1_decode(
    struct vehicle_rt_ir_temp_temp_rl_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_FR_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_fr_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_fr_1_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_FR_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_fr_1_decode(
    struct vehicle_rt_ir_temp_temp_fr_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_FL_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_fl_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_fl_1_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_FL_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_fl_1_decode(
    struct vehicle_rt_ir_temp_temp_fl_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_32.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_32_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_32_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_32.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_32_decode(
    struct vehicle_rt_ir_temp_temp_32_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_31.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_31_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_31_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_31.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_31_decode(
    struct vehicle_rt_ir_temp_temp_31_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_30.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_30_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_30_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_30.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_30_decode(
    struct vehicle_rt_ir_temp_temp_30_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_29.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_29_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_29_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_29.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_29_decode(
    struct vehicle_rt_ir_temp_temp_29_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_28.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_28_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_28_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_28.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_28_decode(
    struct vehicle_rt_ir_temp_temp_28_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_27.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_27_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_27_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_27.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_27_decode(
    struct vehicle_rt_ir_temp_temp_27_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_26.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_26_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_26_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_26.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_26_decode(
    struct vehicle_rt_ir_temp_temp_26_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_25.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_25_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_25_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_25.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_25_decode(
    struct vehicle_rt_ir_temp_temp_25_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_24.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_24_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_24_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_24.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_24_decode(
    struct vehicle_rt_ir_temp_temp_24_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_22.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_22_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_22_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_22.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_22_decode(
    struct vehicle_rt_ir_temp_temp_22_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_23.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_23_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_23_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_23.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_23_decode(
    struct vehicle_rt_ir_temp_temp_23_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_21.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_21_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_21_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_21.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_21_decode(
    struct vehicle_rt_ir_temp_temp_21_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_20.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_20_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_20_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_20.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_20_decode(
    struct vehicle_rt_ir_temp_temp_20_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_19.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_19_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_19_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_19.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_19_decode(
    struct vehicle_rt_ir_temp_temp_19_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_18.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_18_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_18_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_18.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_18_decode(
    struct vehicle_rt_ir_temp_temp_18_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_16.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_16_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_16_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_16.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_16_decode(
    struct vehicle_rt_ir_temp_temp_16_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_15.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_15_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_15_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_15.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_15_decode(
    struct vehicle_rt_ir_temp_temp_15_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_14.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_14_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_14_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_14.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_14_decode(
    struct vehicle_rt_ir_temp_temp_14_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_13.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_13_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_13_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_13.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_13_decode(
    struct vehicle_rt_ir_temp_temp_13_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_12.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_12_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_12_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_12.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_12_decode(
    struct vehicle_rt_ir_temp_temp_12_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_11.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_11_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_11_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_11.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_11_decode(
    struct vehicle_rt_ir_temp_temp_11_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_10.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_10_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_10_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_10.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_10_decode(
    struct vehicle_rt_ir_temp_temp_10_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_8.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_8_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_8_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_8.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_8_decode(
    struct vehicle_rt_ir_temp_temp_8_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_9.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_9_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_9_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_9.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_9_decode(
    struct vehicle_rt_ir_temp_temp_9_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_17.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_17_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_17_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_17.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_17_decode(
    struct vehicle_rt_ir_temp_temp_17_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_6.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_6_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_6_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_6.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_6_decode(
    struct vehicle_rt_ir_temp_temp_6_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_5_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_5_decode(
    struct vehicle_rt_ir_temp_temp_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_4_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_4_decode(
    struct vehicle_rt_ir_temp_temp_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_3_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_3_decode(
    struct vehicle_rt_ir_temp_temp_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_2_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_2_decode(
    struct vehicle_rt_ir_temp_temp_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IRTemp_Temp_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_ir_temp_temp_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_ir_temp_temp_1_t *src_p,
    size_t size);

/**
 * Decode message RT_IRTemp_Temp_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_ir_temp_temp_1_decode(
    struct vehicle_rt_ir_temp_temp_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Final_Condition.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_final_condition_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_final_condition_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Final_Condition.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_final_condition_decode(
    struct vehicle_rt_sb_trig_final_condition_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Initial_Condition.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_initial_condition_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_initial_condition_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Initial_Condition.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_initial_condition_decode(
    struct vehicle_rt_sb_trig_initial_condition_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Direct_Dist.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_direct_dist_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_direct_dist_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Direct_Dist.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_direct_dist_decode(
    struct vehicle_rt_sb_trig_direct_dist_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Forward_Dist.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_forward_dist_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_forward_dist_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Forward_Dist.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_forward_dist_decode(
    struct vehicle_rt_sb_trig_forward_dist_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Path_Dist.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_path_dist_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_path_dist_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Path_Dist.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_path_dist_decode(
    struct vehicle_rt_sb_trig_path_dist_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trig_Accel.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trig_accel_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trig_accel_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trig_Accel.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trig_accel_decode(
    struct vehicle_rt_sb_trig_accel_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_12.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_12_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_12_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_12.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_12_decode(
    struct vehicle_rt_dl1_mk3_measure_time_12_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_11.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_11_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_11_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_11.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_11_decode(
    struct vehicle_rt_dl1_mk3_measure_time_11_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_10.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_10_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_10_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_10.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_10_decode(
    struct vehicle_rt_dl1_mk3_measure_time_10_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_9.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_9_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_9_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_9.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_9_decode(
    struct vehicle_rt_dl1_mk3_measure_time_9_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_8.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_8_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_8_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_8.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_8_decode(
    struct vehicle_rt_dl1_mk3_measure_time_8_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_7.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_7_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_7_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_7.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_7_decode(
    struct vehicle_rt_dl1_mk3_measure_time_7_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_6.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_6_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_6_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_6.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_6_decode(
    struct vehicle_rt_dl1_mk3_measure_time_6_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_5_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_5_decode(
    struct vehicle_rt_dl1_mk3_measure_time_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_4_decode(
    struct vehicle_rt_dl1_mk3_measure_time_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_3_decode(
    struct vehicle_rt_dl1_mk3_measure_time_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_2_decode(
    struct vehicle_rt_dl1_mk3_measure_time_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Measure_Time_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_measure_time_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_measure_time_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Measure_Time_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_measure_time_1_decode(
    struct vehicle_rt_dl1_mk3_measure_time_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_RPM.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_rpm_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_rpm_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_RPM.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_rpm_decode(
    struct vehicle_rt_dl1_mk3_rpm_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Freq_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_freq_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_freq_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Freq_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_freq_4_decode(
    struct vehicle_rt_dl1_mk3_freq_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Freq_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_freq_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_freq_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Freq_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_freq_3_decode(
    struct vehicle_rt_dl1_mk3_freq_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Freq_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_freq_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_freq_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Freq_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_freq_2_decode(
    struct vehicle_rt_dl1_mk3_freq_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Misc_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_misc_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_misc_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Misc_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_misc_3_decode(
    struct vehicle_rt_dl1_mk3_misc_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Misc_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_misc_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_misc_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Misc_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_misc_2_decode(
    struct vehicle_rt_dl1_mk3_misc_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Misc_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_misc_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_misc_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Misc_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_misc_1_decode(
    struct vehicle_rt_dl1_mk3_misc_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_31.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_31_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_31_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_31.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_31_decode(
    struct vehicle_rt_dl1_mk3_aux_31_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_30.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_30_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_30_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_30.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_30_decode(
    struct vehicle_rt_dl1_mk3_aux_30_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_29.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_29_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_29_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_29.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_29_decode(
    struct vehicle_rt_dl1_mk3_aux_29_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_28.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_28_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_28_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_28.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_28_decode(
    struct vehicle_rt_dl1_mk3_aux_28_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_27.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_27_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_27_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_27.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_27_decode(
    struct vehicle_rt_dl1_mk3_aux_27_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_26.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_26_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_26_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_26.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_26_decode(
    struct vehicle_rt_dl1_mk3_aux_26_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_25.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_25_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_25_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_25.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_25_decode(
    struct vehicle_rt_dl1_mk3_aux_25_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_24.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_24_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_24_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_24.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_24_decode(
    struct vehicle_rt_dl1_mk3_aux_24_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_23.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_23_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_23_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_23.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_23_decode(
    struct vehicle_rt_dl1_mk3_aux_23_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_22.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_22_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_22_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_22.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_22_decode(
    struct vehicle_rt_dl1_mk3_aux_22_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_21.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_21_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_21_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_21.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_21_decode(
    struct vehicle_rt_dl1_mk3_aux_21_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_20.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_20_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_20_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_20.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_20_decode(
    struct vehicle_rt_dl1_mk3_aux_20_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_19.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_19_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_19_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_19.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_19_decode(
    struct vehicle_rt_dl1_mk3_aux_19_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_18.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_18_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_18_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_18.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_18_decode(
    struct vehicle_rt_dl1_mk3_aux_18_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_17.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_17_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_17_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_17.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_17_decode(
    struct vehicle_rt_dl1_mk3_aux_17_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_16.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_16_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_16_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_16.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_16_decode(
    struct vehicle_rt_dl1_mk3_aux_16_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_15.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_15_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_15_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_15.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_15_decode(
    struct vehicle_rt_dl1_mk3_aux_15_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_14.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_14_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_14_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_14.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_14_decode(
    struct vehicle_rt_dl1_mk3_aux_14_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_13.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_13_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_13_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_13.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_13_decode(
    struct vehicle_rt_dl1_mk3_aux_13_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_12.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_12_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_12_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_12.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_12_decode(
    struct vehicle_rt_dl1_mk3_aux_12_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_11.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_11_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_11_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_11.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_11_decode(
    struct vehicle_rt_dl1_mk3_aux_11_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_9.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_9_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_9_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_9.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_9_decode(
    struct vehicle_rt_dl1_mk3_aux_9_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_10.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_10_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_10_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_10.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_10_decode(
    struct vehicle_rt_dl1_mk3_aux_10_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_8.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_8_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_8_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_8.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_8_decode(
    struct vehicle_rt_dl1_mk3_aux_8_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_7.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_7_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_7_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_7.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_7_decode(
    struct vehicle_rt_dl1_mk3_aux_7_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_6.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_6_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_6_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_6.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_6_decode(
    struct vehicle_rt_dl1_mk3_aux_6_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_5_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_5_decode(
    struct vehicle_rt_dl1_mk3_aux_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_4_decode(
    struct vehicle_rt_dl1_mk3_aux_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_3_decode(
    struct vehicle_rt_dl1_mk3_aux_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_2_decode(
    struct vehicle_rt_dl1_mk3_aux_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Aux_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_aux_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_aux_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Aux_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_aux_1_decode(
    struct vehicle_rt_dl1_mk3_aux_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Pressure_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_pressure_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_pressure_5_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Pressure_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_pressure_5_decode(
    struct vehicle_rt_dl1_mk3_pressure_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Pressure_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_pressure_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_pressure_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Pressure_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_pressure_4_decode(
    struct vehicle_rt_dl1_mk3_pressure_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Pressure_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_pressure_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_pressure_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Pressure_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_pressure_3_decode(
    struct vehicle_rt_dl1_mk3_pressure_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Pressure_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_pressure_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_pressure_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Pressure_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_pressure_2_decode(
    struct vehicle_rt_dl1_mk3_pressure_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Pressure_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_pressure_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_pressure_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Pressure_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_pressure_1_decode(
    struct vehicle_rt_dl1_mk3_pressure_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Angle_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_angle_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_angle_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Angle_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_angle_3_decode(
    struct vehicle_rt_dl1_mk3_angle_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Angle_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_angle_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_angle_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Angle_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_angle_2_decode(
    struct vehicle_rt_dl1_mk3_angle_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Angle_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_angle_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_angle_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Angle_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_angle_1_decode(
    struct vehicle_rt_dl1_mk3_angle_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_25.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_25_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_25_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_25.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_25_decode(
    struct vehicle_rt_dl1_mk3_temp_25_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_24.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_24_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_24_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_24.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_24_decode(
    struct vehicle_rt_dl1_mk3_temp_24_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_23.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_23_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_23_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_23.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_23_decode(
    struct vehicle_rt_dl1_mk3_temp_23_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_22.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_22_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_22_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_22.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_22_decode(
    struct vehicle_rt_dl1_mk3_temp_22_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_21.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_21_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_21_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_21.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_21_decode(
    struct vehicle_rt_dl1_mk3_temp_21_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_20.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_20_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_20_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_20.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_20_decode(
    struct vehicle_rt_dl1_mk3_temp_20_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_19.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_19_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_19_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_19.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_19_decode(
    struct vehicle_rt_dl1_mk3_temp_19_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_18.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_18_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_18_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_18.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_18_decode(
    struct vehicle_rt_dl1_mk3_temp_18_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_17.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_17_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_17_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_17.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_17_decode(
    struct vehicle_rt_dl1_mk3_temp_17_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_16.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_16_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_16_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_16.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_16_decode(
    struct vehicle_rt_dl1_mk3_temp_16_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_15.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_15_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_15_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_15.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_15_decode(
    struct vehicle_rt_dl1_mk3_temp_15_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_14.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_14_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_14_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_14.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_14_decode(
    struct vehicle_rt_dl1_mk3_temp_14_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_13.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_13_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_13_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_13.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_13_decode(
    struct vehicle_rt_dl1_mk3_temp_13_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_12.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_12_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_12_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_12.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_12_decode(
    struct vehicle_rt_dl1_mk3_temp_12_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_11.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_11_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_11_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_11.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_11_decode(
    struct vehicle_rt_dl1_mk3_temp_11_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_10.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_10_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_10_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_10.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_10_decode(
    struct vehicle_rt_dl1_mk3_temp_10_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_9.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_9_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_9_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_9.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_9_decode(
    struct vehicle_rt_dl1_mk3_temp_9_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_8.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_8_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_8_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_8.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_8_decode(
    struct vehicle_rt_dl1_mk3_temp_8_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_7.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_7_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_7_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_7.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_7_decode(
    struct vehicle_rt_dl1_mk3_temp_7_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_6.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_6_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_6_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_6.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_6_decode(
    struct vehicle_rt_dl1_mk3_temp_6_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_5_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_5_decode(
    struct vehicle_rt_dl1_mk3_temp_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_4_decode(
    struct vehicle_rt_dl1_mk3_temp_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_3_decode(
    struct vehicle_rt_dl1_mk3_temp_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_2_decode(
    struct vehicle_rt_dl1_mk3_temp_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Temp_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_temp_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_temp_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Temp_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_temp_1_decode(
    struct vehicle_rt_dl1_mk3_temp_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_32.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_32_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_32_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_32.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_32_decode(
    struct vehicle_rt_dl1_mk3_analog_32_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_31.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_31_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_31_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_31.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_31_decode(
    struct vehicle_rt_dl1_mk3_analog_31_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_30.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_30_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_30_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_30.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_30_decode(
    struct vehicle_rt_dl1_mk3_analog_30_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_29.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_29_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_29_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_29.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_29_decode(
    struct vehicle_rt_dl1_mk3_analog_29_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_28.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_28_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_28_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_28.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_28_decode(
    struct vehicle_rt_dl1_mk3_analog_28_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_27.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_27_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_27_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_27.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_27_decode(
    struct vehicle_rt_dl1_mk3_analog_27_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_26.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_26_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_26_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_26.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_26_decode(
    struct vehicle_rt_dl1_mk3_analog_26_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_25.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_25_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_25_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_25.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_25_decode(
    struct vehicle_rt_dl1_mk3_analog_25_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_15.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_15_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_15_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_15.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_15_decode(
    struct vehicle_rt_dl1_mk3_analog_15_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_14.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_14_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_14_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_14.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_14_decode(
    struct vehicle_rt_dl1_mk3_analog_14_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_17.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_17_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_17_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_17.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_17_decode(
    struct vehicle_rt_dl1_mk3_analog_17_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_24.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_24_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_24_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_24.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_24_decode(
    struct vehicle_rt_dl1_mk3_analog_24_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_23.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_23_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_23_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_23.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_23_decode(
    struct vehicle_rt_dl1_mk3_analog_23_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_22.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_22_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_22_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_22.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_22_decode(
    struct vehicle_rt_dl1_mk3_analog_22_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_21.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_21_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_21_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_21.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_21_decode(
    struct vehicle_rt_dl1_mk3_analog_21_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_20.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_20_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_20_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_20.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_20_decode(
    struct vehicle_rt_dl1_mk3_analog_20_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_19.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_19_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_19_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_19.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_19_decode(
    struct vehicle_rt_dl1_mk3_analog_19_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_16.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_16_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_16_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_16.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_16_decode(
    struct vehicle_rt_dl1_mk3_analog_16_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_18.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_18_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_18_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_18.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_18_decode(
    struct vehicle_rt_dl1_mk3_analog_18_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_12.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_12_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_12_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_12.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_12_decode(
    struct vehicle_rt_dl1_mk3_analog_12_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_11.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_11_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_11_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_11.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_11_decode(
    struct vehicle_rt_dl1_mk3_analog_11_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_10.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_10_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_10_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_10.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_10_decode(
    struct vehicle_rt_dl1_mk3_analog_10_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_9.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_9_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_9_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_9.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_9_decode(
    struct vehicle_rt_dl1_mk3_analog_9_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_8.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_8_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_8_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_8.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_8_decode(
    struct vehicle_rt_dl1_mk3_analog_8_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_7.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_7_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_7_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_7.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_7_decode(
    struct vehicle_rt_dl1_mk3_analog_7_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_6.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_6_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_6_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_6.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_6_decode(
    struct vehicle_rt_dl1_mk3_analog_6_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_5.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_5_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_5_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_5.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_5_decode(
    struct vehicle_rt_dl1_mk3_analog_5_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_4.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_4_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_4_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_4.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_4_decode(
    struct vehicle_rt_dl1_mk3_analog_4_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_3.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_3_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_3_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_3.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_3_decode(
    struct vehicle_rt_dl1_mk3_analog_3_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_2_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_2_decode(
    struct vehicle_rt_dl1_mk3_analog_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Analog_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_analog_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_analog_1_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Analog_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_analog_1_decode(
    struct vehicle_rt_dl1_mk3_analog_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_DL1MK3_Accel.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_dl1_mk3_accel_encode(
    uint8_t *dst_p,
    struct vehicle_rt_dl1_mk3_accel_t *src_p,
    size_t size);

/**
 * Decode message RT_DL1MK3_Accel.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_dl1_mk3_accel_decode(
    struct vehicle_rt_dl1_mk3_accel_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_4_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_4_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_4_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_4_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_4_vel_ned_2_decode(
    struct vehicle_rt_sb_ins_vpt_4_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_4_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_4_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_4_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_4_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_4_vel_ned_1_decode(
    struct vehicle_rt_sb_ins_vpt_4_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_4_Offset.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_4_offset_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_4_offset_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_4_Offset.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_4_offset_decode(
    struct vehicle_rt_sb_ins_vpt_4_offset_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_3_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_3_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_3_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_3_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_3_vel_ned_2_decode(
    struct vehicle_rt_sb_ins_vpt_3_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_3_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_3_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_3_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_3_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_3_vel_ned_1_decode(
    struct vehicle_rt_sb_ins_vpt_3_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_3_Offset.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_3_offset_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_3_offset_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_3_Offset.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_3_offset_decode(
    struct vehicle_rt_sb_ins_vpt_3_offset_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_2_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_2_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_2_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_2_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_2_vel_ned_2_decode(
    struct vehicle_rt_sb_ins_vpt_2_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_2_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_2_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_2_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_2_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_2_vel_ned_1_decode(
    struct vehicle_rt_sb_ins_vpt_2_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_2_Offset.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_2_offset_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_2_offset_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_2_Offset.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_2_offset_decode(
    struct vehicle_rt_sb_ins_vpt_2_offset_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_1_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_1_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_1_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_1_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_1_vel_ned_2_decode(
    struct vehicle_rt_sb_ins_vpt_1_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_1_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_1_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_1_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_1_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_1_vel_ned_1_decode(
    struct vehicle_rt_sb_ins_vpt_1_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vpt_1_Offset.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vpt_1_offset_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vpt_1_offset_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vpt_1_Offset.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vpt_1_offset_decode(
    struct vehicle_rt_sb_ins_vpt_1_offset_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Slip.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_slip_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_slip_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Slip.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_slip_decode(
    struct vehicle_rt_sb_ins_slip_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vel_ECEF_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vel_ecef_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vel_ecef_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vel_ECEF_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vel_ecef_2_decode(
    struct vehicle_rt_sb_ins_vel_ecef_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vel_ECEF_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vel_ecef_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vel_ecef_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vel_ECEF_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vel_ecef_1_decode(
    struct vehicle_rt_sb_ins_vel_ecef_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vel_ned_2_decode(
    struct vehicle_rt_sb_ins_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_vel_ned_1_decode(
    struct vehicle_rt_sb_ins_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Pos_ECEF_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_pos_ecef_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_pos_ecef_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Pos_ECEF_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_pos_ecef_2_decode(
    struct vehicle_rt_sb_ins_pos_ecef_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Pos_ECEF_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_pos_ecef_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_pos_ecef_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Pos_ECEF_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_pos_ecef_1_decode(
    struct vehicle_rt_sb_ins_pos_ecef_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Pos_LLH_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_pos_llh_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_pos_llh_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Pos_LLH_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_pos_llh_2_decode(
    struct vehicle_rt_sb_ins_pos_llh_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Pos_LLH_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_pos_llh_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_pos_llh_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Pos_LLH_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_pos_llh_1_decode(
    struct vehicle_rt_sb_ins_pos_llh_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Heading_Gradient_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_heading_gradient_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_heading_gradient_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Heading_Gradient_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_heading_gradient_2_decode(
    struct vehicle_rt_sb_ins_heading_gradient_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Heading_Gradient.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_heading_gradient_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_heading_gradient_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Heading_Gradient.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_heading_gradient_decode(
    struct vehicle_rt_sb_ins_heading_gradient_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Status.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_status_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_status_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Status.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_status_decode(
    struct vehicle_rt_sb_ins_status_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_INS_Attitude.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_ins_attitude_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_ins_attitude_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_INS_Attitude.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_ins_attitude_decode(
    struct vehicle_rt_sb_ins_attitude_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Output_Status.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_output_status_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_output_status_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Output_Status.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_output_status_decode(
    struct vehicle_rt_sb_output_status_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Heading_Gradient_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_heading_gradient_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_heading_gradient_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Heading_Gradient_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_heading_gradient_2_decode(
    struct vehicle_rt_sb_gps_heading_gradient_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Cumulative_Distance_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_cumulative_distance_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_cumulative_distance_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Cumulative_Distance_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_cumulative_distance_2_decode(
    struct vehicle_rt_sb_cumulative_distance_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Cumulative_Distance_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_cumulative_distance_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_cumulative_distance_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Cumulative_Distance_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_cumulative_distance_1_decode(
    struct vehicle_rt_sb_cumulative_distance_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Trigger_Timestamp.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_trigger_timestamp_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_trigger_timestamp_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Trigger_Timestamp.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_trigger_timestamp_decode(
    struct vehicle_rt_sb_trigger_timestamp_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IMU06_Gyro_Rates.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_imu06_gyro_rates_encode(
    uint8_t *dst_p,
    struct vehicle_rt_imu06_gyro_rates_t *src_p,
    size_t size);

/**
 * Decode message RT_IMU06_Gyro_Rates.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_imu06_gyro_rates_decode(
    struct vehicle_rt_imu06_gyro_rates_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_IMU06_Accel.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_imu06_accel_encode(
    uint8_t *dst_p,
    struct vehicle_rt_imu06_accel_t *src_p,
    size_t size);

/**
 * Decode message RT_IMU06_Accel.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_imu06_accel_decode(
    struct vehicle_rt_imu06_accel_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Speed.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_speed_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_speed_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Speed.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_speed_decode(
    struct vehicle_rt_sb_speed_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_RTK_Slip.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_rtk_slip_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_rtk_slip_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_RTK_Slip.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_rtk_slip_decode(
    struct vehicle_rt_sb_rtk_slip_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_RTK_Attitude.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_rtk_attitude_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_rtk_attitude_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_RTK_Attitude.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_rtk_attitude_decode(
    struct vehicle_rt_sb_rtk_attitude_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Mcycle_Lean.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_mcycle_lean_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_mcycle_lean_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Mcycle_Lean.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_mcycle_lean_decode(
    struct vehicle_rt_sb_gps_mcycle_lean_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Status.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_status_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_status_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Status.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_status_decode(
    struct vehicle_rt_sb_gps_status_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Pos_ECEF_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_pos_ecef_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_pos_ecef_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Pos_ECEF_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_pos_ecef_2_decode(
    struct vehicle_rt_sb_gps_pos_ecef_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Pos_ECEF_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_pos_ecef_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_pos_ecef_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Pos_ECEF_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_pos_ecef_1_decode(
    struct vehicle_rt_sb_gps_pos_ecef_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Pos_LLH_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_pos_llh_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_pos_llh_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Pos_LLH_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_pos_llh_2_decode(
    struct vehicle_rt_sb_gps_pos_llh_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Pos_LLH_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_pos_llh_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_pos_llh_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Pos_LLH_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_pos_llh_1_decode(
    struct vehicle_rt_sb_gps_pos_llh_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Heading_Gradient.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_heading_gradient_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_heading_gradient_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Heading_Gradient.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_heading_gradient_decode(
    struct vehicle_rt_sb_gps_heading_gradient_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Vel_ECEF_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_vel_ecef_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_vel_ecef_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Vel_ECEF_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_vel_ecef_2_decode(
    struct vehicle_rt_sb_gps_vel_ecef_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Vel_ECEF_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_vel_ecef_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_vel_ecef_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Vel_ECEF_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_vel_ecef_1_decode(
    struct vehicle_rt_sb_gps_vel_ecef_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Vel_NED_2.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_vel_ned_2_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_vel_ned_2_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Vel_NED_2.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_vel_ned_2_decode(
    struct vehicle_rt_sb_gps_vel_ned_2_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Vel_NED_1.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_vel_ned_1_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_vel_ned_1_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Vel_NED_1.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_vel_ned_1_decode(
    struct vehicle_rt_sb_gps_vel_ned_1_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Speed.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_speed_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_speed_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Speed.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_speed_decode(
    struct vehicle_rt_sb_gps_speed_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_GPS_Time.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gps_time_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gps_time_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_GPS_Time.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gps_time_decode(
    struct vehicle_rt_sb_gps_time_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Accel.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_accel_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_accel_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Accel.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_accel_decode(
    struct vehicle_rt_sb_accel_t *dst_p,
    uint8_t *src_p,
    size_t size);

/**
 * Encode message RT_SB_Gyro_Rates.
 *
 * @param[out] dst_p Buffer to encode the message into.
 * @param[in] src_p Data to encode.
 * @param[in] size Size of dst_p.
 *
 * @return Size of encoded data, or negative error code.
 */
ssize_t vehicle_rt_sb_gyro_rates_encode(
    uint8_t *dst_p,
    struct vehicle_rt_sb_gyro_rates_t *src_p,
    size_t size);

/**
 * Decode message RT_SB_Gyro_Rates.
 *
 * @param[out] dst_p Object to decode the message into.
 * @param[in] src_p Message to decode.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int vehicle_rt_sb_gyro_rates_decode(
    struct vehicle_rt_sb_gyro_rates_t *dst_p,
    uint8_t *src_p,
    size_t size);

#endif
